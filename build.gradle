plugins {
	id 'application'
	id 'checkstyle'
	id 'jacoco'
	id 'org.springframework.boot' version '3.0.6'
	id 'io.spring.dependency-management' version '1.1.0'
//	id 'com.adarshr.test-logger' version '2.1.1'
//	id 'com.github.ben-manes.versions' version '0.38.0'
	id 'org.liquibase.gradle' version '2.2.0' //2 шаг
	// Плагины для swagger
	// Позволяют получить сгенерированную документацию по API в виде json файла
//	id 'org.springdoc.openapi-gradle-plugin' version '1.3.3'
//	id 'com.github.johnrengelman.processes' version '0.5.0'
	// Сборщик фронтенда
//	id 'org.siouan.frontend-jdk11' version '6.0.0'

	// в домашке спринг ОРМ были:
	//  id 'java' --
	//	id 'com.adarshr.test-logger' version '3.0.0' --
	//	id 'org.liquibase.gradle' version '2.0.4' +
}

// В тестовом проекте
//plugins {
//	application
//	id("io.freefair.lombok") version "8.1.0"
//	id("org.springframework.boot") version "3.1.2"
//	id("io.spring.dependency-management") version "1.1.2"
//	id("com.github.ben-manes.versions") version "0.47.0"
//}

group = 'hexlet.code'
version = '1.0-SNAPSHOT'

application {
	mainClass = 'hexlet.code.AppApplication'
}

repositories {
	mavenCentral()
}

dependencies {
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	compileOnly 'org.projectlombok:lombok' //2 шаг

	annotationProcessor( //2 шаг
			'org.projectlombok:lombok',
			'com.querydsl:querydsl-apt:5.0.0:jakarta',
			'jakarta.persistence:jakarta.persistence-api:3.1.0'
	)

	implementation(

			'org.springframework.boot:spring-boot-starter-data-jpa', //2 шаг
			'org.springframework.boot:spring-boot-starter-web',
//			'org.springframework.boot:spring-boot-starter-actuator',
//			'org.springframework.boot:spring-boot-starter-validation',
//			'org.springframework.boot:spring-boot-starter-security',
//			'io.jsonwebtoken:jjwt:0.9.1',
			// Зависимость для swagger
			// Позволяет сгенерировать и проматривать интерактивную документацию по API
//			'org.springdoc:springdoc-openapi-ui:1.7.0',
			'org.liquibase:liquibase-core' // была запятая, 2 шаг
//			'com.querydsl:querydsl-jpa:5.0.0:jakarta'
//			'com.rollbar:rollbar-spring-boot-webmvc:1.10.0'
	)

//	В домашке Спринг ОРМ были импл:
//	implementation 'org.springframework.boot:spring-boot-starter-web' +
//  implementation 'org.springframework.boot:spring-boot-starter-data-jpa' +
//  testImplementation 'org.springframework.boot:spring-boot-starter-test' +
//  implementation 'org.liquibase:liquibase-core' +
//  compileOnly 'org.projectlombok:lombok' +
//  annotationProcessor 'org.projectlombok:lombok' +
//  runtimeOnly 'com.h2database:h2:1.4.200' +

//	В тестовом проекте:
//	dependencies {
//  implementation("org.springframework.boot:spring-boot-starter-web") +
//  implementation("org.springframework.boot:spring-boot-starter-data-jpa") +
//  implementation("org.springframework.boot:spring-boot-starter-validation") -
//  implementation("org.springframework.boot:spring-boot-devtools") -
//  implementation("org.springframework.boot:spring-boot-starter-actuator") -
//  implementation("org.springframework.boot:spring-boot-configuration-processor")
//  implementation("org.springframework.boot:spring-boot-starter-security")
//  implementation("org.springframework.boot:spring-boot-starter-oauth2-resource-server")
//
//  implementation("org.springframework.security:spring-security-test")
//  implementation("org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0")
//
//  implementation("org.modelmapper:modelmapper:3.1.1")
//  implementation("org.zalando:logbook-spring-boot-starter:3.3.0")
//
//  implementation("net.datafaker:datafaker:2.0.1")
//  implementation("io.sentry:sentry-spring-boot-starter-jakarta:6.28.0")
//  runtimeOnly("com.h2database:h2")
//  testImplementation("org.springframework.boot:spring-boot-starter-test")
//  testImplementation(platform("org.junit:junit-bom"))
//  testImplementation("org.junit.jupiter:junit-jupiter")
//  implementation("org.jeasy:easy-random-core:5.0.0")
//}

	liquibaseRuntime( // 2 шаг
			sourceSets.main.output,
			'org.liquibase:liquibase-core',
			'info.picocli:picocli:4.7.1',
			'org.liquibase.ext:liquibase-hibernate6:4.21.1',
			'org.springframework.boot:spring-boot-starter-data-jpa',
			'com.h2database:h2',
	)

	runtimeOnly ( //2 шаг
			'com.h2database:h2',
			'org.postgresql:postgresql:42.6.0'
	)

	testImplementation(
//			'org.springframework.boot:spring-boot-starter-security',
//			'org.springframework.security:spring-security-test',
			'org.springframework.boot:spring-boot-starter-test',
//			'com.tobedevoured.modelcitizen:spring:0.8.3'
	)
}

wrapper {
	gradleVersion = '8.2'
	distributionType = Wrapper.DistributionType.ALL
}

compileJava {
	options.release = 20
	options.encoding = 'UTF-8'
}

test {
	useJUnitPlatform()
}

checkstyle {
	toolVersion '10.12.1'
}

// Настраиваем таску diffChangeLog таким образом,
// чтобы миграции учитывали изменения в моделях, генерировалась при каждом изменении в модели
diffChangelog { //шаг 2
	dependsOn compileJava
}

// Настраиваем Liquibase
//liquibase {
//	activities {
//		main {
//			// Указываем путь, по которому будет сгенерирован файл миграции
//			changelogFile 'src/main/resources/db/changelog/db.changelog-master.yaml' +
//			// Указывем источник, с которым будут сравниваться изменения
//			// Это база данных, изначально она пустая
//			url 'jdbc:h2:./taskManager' +
//			// Сравниваем с моделями, задавая пакет
//			referenceUrl 'hibernate:spring:io.hexlet.javaspringblog.model.' +
//					// Указываем диалект
//					'?dialect=org.hibernate.dialect.H2Dialect' +
//					// Указываем правила именования таблиц и столбцов,
//					// чтобы они соответствовали правилам Spring
//					'&hibernate.physical_naming_strategy=org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy'
//		}
//	}
//}
// Из домашки ОРМ Спринг: Настраиваем Liquibase
liquibase {
	activities {
		main {
			// Указываем путь, по которому будет сгенерирован файл миграции
			changeLogFile 'src/main/resources/db/changelog/db.changelog-master.yaml'
			// Указывем источник, с которым будут сравниваться изменния
			// Это база данных, изначально она пустая
			url 'jdbc:h2:./taskManager'
			// Имя пользователя и пароль для подключения к базе
			username 'sa'
			password 'sa'
			// Указывем, откуда мы будем брать изменения
			// Это модели
			// Указываем пакет, в котором расположены модели (Сравниваем с моделями, задавая пакет)
			referenceUrl 'hibernate:spring:exercise.model' +
					// Указываем диалект
					'?dialect=org.hibernate.dialect.H2Dialect' +
					// Указываем правила именования таблиц и столбцов,
					// чтобы они соответствовали правилам Spring
					'&hibernate.physical_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy'
		}
	}
}
//// Сборка фронтенда.
//// Выполняется только если ничего не изменилось.
//// *****************************************************************************
//frontend {
//	nodeVersion = '16.13.1'
//	installScript = 'install'
//	assembleScript = 'run build'
//	packageJsonDirectory = file("${projectDir}/frontend")
//}
//
//def configFrontendTasks = {
//	inputs.files(fileTree("$projectDir/frontend").exclude('build', 'node_modules'))
//	outputs.dir("$buildDir/resources/main/static")
//}
//
//assembleFrontend {
//	configure configFrontendTasks
//
//	doLast {
//		copy {
//			from "$projectDir/frontend/build"
//			into "$buildDir/resources/main/static"
//		}
//	}
//}
//
//installFrontend {
//	configure configFrontendTasks
//}
//
//processResources.dependsOn assembleFrontend
// *****************************************************************************

// Таска нужная heroku для деплоя
task stage(dependsOn: [clean, installDist])
installDist.mustRunAfter clean

jacocoTestReport {
	reports {
		xml.required = true
	}
}

test {
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	dependsOn test
}
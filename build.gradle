plugins {
	id 'application'
	id 'checkstyle'
	id 'jacoco'
	id 'org.springframework.boot' version '3.1.2'
	id 'io.spring.dependency-management' version '1.1.3'
//	id 'com.adarshr.test-logger' version '2.1.1'
//	id 'com.github.ben-manes.versions' version '0.38.0'
	//Когда плагин liquibase применяется, он создает Gradle-таски для каждой команды, поддерживаемой Liquibase.
	id 'org.liquibase.gradle' version '2.2.0' //2 шаг  https://github.com/liquibase/liquibase-gradle-plugin
	// Плагины для swagger
	// Позволяют получить сгенерированную документацию по API в виде json файла
//	id 'org.springdoc.openapi-gradle-plugin' version '1.3.3'
//	id 'com.github.johnrengelman.processes' version '0.5.0'
	// Сборщик фронтенда
//	id 'org.siouan.frontend-jdk11' version '6.0.0'
}

group = 'hexlet.code'
version = '1.0-SNAPSHOT'

application {
	mainClass = 'hexlet.code.AppApplication'
}

repositories {
	mavenCentral()
}

dependencies {
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	compileOnly 'org.projectlombok:lombok' //2 шаг

	annotationProcessor( //2 шаг актуал
		'org.projectlombok:lombok',
		'com.querydsl:querydsl-apt:5.0.0:jakarta',
		'jakarta.persistence:jakarta.persistence-api:3.1.0'
	)

	implementation(

			'org.springframework.boot:spring-boot-starter-data-jpa', //2 шаг
			'org.springframework.boot:spring-boot-starter-web',
//			'org.springframework.boot:spring-boot-starter-actuator',
//			'org.springframework.boot:spring-boot-starter-validation',
//			'org.springframework.boot:spring-boot-starter-security',
			'org.liquibase:liquibase-core:4.23.1', //2 шаг, было так 'org.liquibase:liquibase-core'
			'com.querydsl:querydsl-jpa:5.0.0:jakarta', //2 шаг актуал
			'com.rollbar:rollbar-spring-boot-webmvc:1.10.0', //2 шаг
			'org.postgresql:postgresql:42.6.0' //2 шаг есть у Егора

//			'io.jsonwebtoken:jjwt:0.9.1',
			// Зависимость для swagger
			// Позволяет сгенерировать и проматривать интерактивную документацию по API
	)


// LG-Плагин должен иметь возможность находить Liquibase в пути к классам при запуске таски, а Liquibase должен иметь
// возможность находить драйверы базы данных, анализаторы журнала изменений и т. д. в пути к классам.
// Это делается путем добавления liquibaseRuntime-зависимостей к dependencies блоку
	liquibaseRuntime( // 2 шаг
			//Пользователям модуля liquibase-hibernate, которым необходимо запустить команду Hibernate diff
			// или создать changelog из классов Entity, нужно будет добавить что-то вроде следующего в ваши
			// liquibaseRuntime-зависимости:
			'org.liquibase.ext:liquibase-hibernate6:4.23.1', //было так 'org.liquibase.ext:liquibase-hibernate6:4.21.1',
			//https://repo1.maven.org/maven2/org/liquibase/ext/liquibase-hibernate6/
			sourceSets.main.output, //необходимо, чтобы Hibernate мог найти ваши Entity классы.
			'org.liquibase:liquibase-core:4.23.1', //было так 'org.liquibase:liquibase-core', а так же :4.23.1
			'info.picocli:picocli:4.7.1', //https://github.com/liquibase/liquibase-gradle-plugin
			'org.yaml:snakeyaml:2.2', //https://github.com/liquibase/liquibase-gradle-plugin
			'org.springframework.boot:spring-boot-starter-data-jpa:3.1.3', //было так 'org.springframework.boot:spring-boot-starter-data-jpa',
			'com.h2database:h2',
			'mysql:mysql-connector-java:8.0.33' //https://github.com/liquibase/liquibase-gradle-plugin
			// postgres??
	)

	runtimeOnly ( //2 шаг
			'com.h2database:h2',
			'org.postgresql:postgresql:42.6.0'
	)

	testImplementation(
//			'org.springframework.boot:spring-boot-starter-security',
//			'org.springframework.security:spring-security-test',
			'org.springframework.boot:spring-boot-starter-test',
//			'com.tobedevoured.modelcitizen:spring:0.8.3'
	)
}

wrapper {
	gradleVersion = '8.2.1'
	distributionType = Wrapper.DistributionType.ALL
}

compileJava {
	options.release = 20
	options.encoding = 'UTF-8'
}

test {
	useJUnitPlatform()
}

checkstyle {
	toolVersion '10.12.1'
}

// Настраиваем таску diffChangeLog таким образом, чтобы миграции учитывали изменения в моделях, генерировалась при каждом изменении в модели
// Настраиваем Liquibase 2 шаг актуал
// В новой версии изменилось название таски gradle.
// Теперь она называется *diffChangelog*, а старое именование *diffChangeLog* считается устаревшим
diffChangelog {
	dependsOn compileJava
}


//Настройка LG-плагина предполагает понимание трех основных элементов: команд, параметров и действий.
//
//command — это команда Liquibase, такая как dropAll, updateили diffChangelog. Это то, что вы хотите, чтобы Liquibase
// делала, как описано в документации по командам Liquibase . Плагин Liquibase Gradle создает таск для каждой команды
// Liquibase, и именно так пользователи сообщают Gradle, что он хочет от Liquibase.
//
//parameters относятся к параметрам, которые отправляются в Liquibase для настройки того, как Liquibase будет запускать
// command. Сюда входят такие вещи, как учетные данные базы данных, расположение changelog файла и т. д. Параметры
// также описаны в документации по командам Liquibase . Параметры обычно настраиваются в разделе «activities»
// блока liquibase.
//
//activities — самые сложные из трех. command — это задача низкого уровня, которую необходимо выполнить, тогда как
// activity — это более высокий уровень, более широкая категория, и ее можно использовать для запуска одной и той же
// команды разными способами. Например, развертывание приложения может включать обновление схемы приложения,
// но также может включать вставку метаданных о приложении в реестр. Плагин достигает этого, позволяя пользователям
// определять два действия, каждое из которых относится к различным базам данных и changlog'ам.
// Activities также можно рассматривать как набор параметров, которые необходимо сгруппировать.
liquibase {
	activities {
		main {
			changelogFile "src/main/resources/db/changelog/db.changelog-master.yaml"
			url "jdbc:h2:./taskManager" //почему определяем h2 а не в зависимости от dev/prod?
			// Теперь не требуется указывать имя и пароль для подключения к БД
			referenceUrl 'hibernate:spring:hexlet.code.model.' +
					// Указываем диалект
					'?dialect=org.hibernate.dialect.H2Dialect' +
					// Изменилось стратегия именования
					// По умолчанию теперь используется CamelCaseToUnderscoresNamingStrategy
					'&hibernate.physical_naming_strategy=org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy'
		}
	}
}
//// Сборка фронтенда.
//// Выполняется только если ничего не изменилось.
//// *****************************************************************************
//frontend {
//	nodeVersion = '16.13.1'
//	installScript = 'install'
//	assembleScript = 'run build'
//	packageJsonDirectory = file("${projectDir}/frontend")
//}
//
//def configFrontendTasks = {
//	inputs.files(fileTree("$projectDir/frontend").exclude('build', 'node_modules'))
//	outputs.dir("$buildDir/resources/main/static")
//}
//
//assembleFrontend {
//	configure configFrontendTasks
//
//	doLast {
//		copy {
//			from "$projectDir/frontend/build"
//			into "$buildDir/resources/main/static"
//		}
//	}
//}
//
//installFrontend {
//	configure configFrontendTasks
//}
//
//processResources.dependsOn assembleFrontend
// *****************************************************************************

// Таска нужная heroku для деплоя
task stage(dependsOn: [clean, installDist])
installDist.mustRunAfter clean

jacocoTestReport {
	reports {
		xml.required = true
	}
}

test {
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	dependsOn test
}